from django.db import models
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.urls import reverse
from django.utils import timezone


class Department(models.Model):
    name = models.CharField("T√™n ph√≤ng ban", max_length=120, unique=True)
    code = models.CharField("M√£ ph√≤ng ban", max_length=30, unique=True, blank=True, null=True)
    description = models.TextField("M√¥ t·∫£", blank=True, null=True)
    is_active = models.BooleanField("Ho·∫°t ƒë·ªông", default=True)

    class Meta:
        verbose_name = "Ph√≤ng ban"
        verbose_name_plural = "Ph√≤ng ban"
        ordering = ["name"]

    def __str__(self):
        return self.name

    def get_absolute_url(self):
        return reverse('admin:work_department_change', args=[self.id])


class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="profile")
    department = models.ForeignKey(
        Department, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="Ph√≤ng ban"
    )
    phone = models.CharField("S·ªë ƒëi·ªán tho·∫°i", max_length=15, blank=True, null=True)
    position = models.CharField("Ch·ª©c v·ª•", max_length=100, blank=True, null=True)

    class Meta:
        verbose_name = "H·ªì s∆° ng∆∞·ªùi d√πng"
        verbose_name_plural = "H·ªì s∆° ng∆∞·ªùi d√πng"

    def __str__(self):
        return f"{self.user.get_full_name() or self.user.username} - {self.department.name if self.department else 'Ch∆∞a c√≥ ph√≤ng ban'}"


@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        UserProfile.objects.create(user=instance)

@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    if hasattr(instance, "profile"):
        instance.profile.save()


class Task(models.Model):
    STATUS_CHOICES = [
        ('NEW', 'üÜï Ch∆∞a b·∫Øt ƒë·∫ßu'),
        ('DOING', 'üöÄ ƒêang th·ª±c hi·ªán'),
        ('PENDING', '‚è≥ Ch·ªù ph√™ duy·ªát'),
        ('DONE', '‚úÖ ƒê√£ ho√†n th√†nh'),
        ('CANCELLED', '‚ùå ƒê√£ h·ªßy'),
    ]

    PRIORITY_CHOICES = [
        ('LOW', 'üìå Th·∫•p'),
        ('MEDIUM', 'üìù Trung b√¨nh'),
        ('HIGH', 'üî• Cao'),
        ('URGENT', '‚ö° Kh·∫©n c·∫•p'),
    ]

    department = models.ForeignKey(
        Department, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="Ph√≤ng ban"
    )
    title = models.CharField("T√™n c√¥ng vi·ªác", max_length=255)
    content = models.TextField("N·ªôi dung c√¥ng vi·ªác", blank=True)
    priority = models.CharField(
        "ƒê·ªô ∆∞u ti√™n", max_length=10, choices=PRIORITY_CHOICES, default='MEDIUM'
    )

    assigned_by = models.ForeignKey(
        User, related_name='assigned_tasks', on_delete=models.PROTECT, verbose_name="Ng∆∞·ªùi giao vi·ªác"
    )
    assignee = models.ForeignKey(
        User, related_name='tasks', on_delete=models.PROTECT, verbose_name="Ng∆∞·ªùi ph·ª• tr√°ch"
    )
    supporters = models.ManyToManyField(
        User, related_name='supporting_tasks', blank=True, verbose_name="Ng∆∞·ªùi h·ªó tr·ª£"
    )

    progress = models.PositiveIntegerField("% ho√†n th√†nh", default=0)
    status = models.CharField("Tr·∫°ng th√°i", max_length=10, choices=STATUS_CHOICES, default='NEW')

    deadline = models.DateTimeField("H·∫°n ho√†n th√†nh", null=True, blank=True)
    estimated_hours = models.PositiveIntegerField("Gi·ªù ∆∞·ªõc t√≠nh", null=True, blank=True)

    approver = models.ForeignKey(
        User, related_name='approved_tasks', on_delete=models.SET_NULL,
        null=True, blank=True, verbose_name="Ng∆∞·ªùi ph√™ duy·ªát"
    )
    approved_at = models.DateTimeField("Th·ªùi gian ph√™ duy·ªát", null=True, blank=True)

    created_at = models.DateTimeField("Ng√†y t·∫°o", auto_now_add=True)
    updated_at = models.DateTimeField("C·∫≠p nh·∫≠t l√∫c", auto_now=True)

    class Meta:
        verbose_name = "C√¥ng vi·ªác"
        verbose_name_plural = "C√¥ng vi·ªác"
        permissions = [('can_approve', 'C√≥ th·ªÉ ph√™ duy·ªát c√¥ng vi·ªác'),('view_all_tasks', 'C√≥ th·ªÉ xem t·∫•t c·∫£ c√¥ng vi·ªác (read-only)'),]
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.title} ({self.get_status_display()})"

    def get_absolute_url(self):
        return reverse('task_list')

    def save(self, *args, **kwargs):
        """
        Cho ph√©p DONE != 100%.
        Khi ƒë√£ c√≥ approver v√† status=DONE m√† ch∆∞a c√≥ approved_at -> set approved_at.
        Kh√¥ng t·ª± √©p tr·∫°ng th√°i d·ª±a tr√™n % ·ªü ƒë√¢y (ƒë√£ x·ª≠ l√Ω trong TaskUpdate ho·∫∑c view).
        """
        if self.status == 'DONE' and self.approver and not self.approved_at:
            self.approved_at = timezone.now()
        super().save(*args, **kwargs)

    @property
    def is_overdue(self):
        if self.deadline:
            return timezone.now() > self.deadline and self.status not in ('DONE', 'CANCELLED')
        return False

    @property
    def days_until_deadline(self):
        if self.deadline:
            delta = self.deadline - timezone.now()
            return delta.days
        return None


class TaskUpdate(models.Model):
    """B·∫£n c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô c·ªßa nh√¢n vi√™n cho c√¥ng vi·ªác."""
    task = models.ForeignKey(
        Task, related_name='updates', on_delete=models.CASCADE, verbose_name="C√¥ng vi·ªác"
    )
    user = models.ForeignKey(
        User, related_name='task_updates', on_delete=models.CASCADE, verbose_name="Ng∆∞·ªùi c·∫≠p nh·∫≠t"
    )
    content = models.TextField("N·ªôi dung c·∫≠p nh·∫≠t", blank=True, null=True)
    progress = models.PositiveIntegerField("% ho√†n th√†nh", default=0)
    created_at = models.DateTimeField("Th·ªùi gian c·∫≠p nh·∫≠t", auto_now_add=True)

    class Meta:
        verbose_name = "C·∫≠p nh·∫≠t c√¥ng vi·ªác"
        verbose_name_plural = "C·∫≠p nh·∫≠t c√¥ng vi·ªác"
        ordering = ['-created_at']

    def __str__(self):
        return f"C·∫≠p nh·∫≠t #{self.id} - {self.task.title} - {self.progress}%"

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)
        task = self.task

        fields_to_update = []
        if task.progress != self.progress:
            task.progress = self.progress
            fields_to_update.append('progress')

        # N·∫øu ch∆∞a DONE th√¨ c·∫≠p nh·∫≠t tr·∫°ng th√°i:
        if task.status != 'DONE':
            if self.progress >= 100:
                if task.status != 'PENDING':
                    task.status = 'PENDING'
                    fields_to_update.append('status')
            elif self.progress > 0:
                if task.status != 'DOING':
                    task.status = 'DOING'
                    fields_to_update.append('status')
            else:
                if task.status != 'NEW':
                    task.status = 'NEW'
                    fields_to_update.append('status')

        if fields_to_update:
            task.updated_at = timezone.now()
            fields_to_update.append('updated_at')
            task.save(update_fields=fields_to_update)


class ManagerFeedback(models.Model):
    """Ph·∫£n h·ªìi c·ªßa qu·∫£n l√Ω cho c√¥ng vi·ªác."""
    task = models.ForeignKey(
        Task, related_name='manager_feedbacks', on_delete=models.CASCADE, verbose_name="C√¥ng vi·ªác"
    )
    manager = models.ForeignKey(
        User, related_name='manager_feedbacks', on_delete=models.CASCADE, verbose_name="Qu·∫£n l√Ω"
    )
    content = models.TextField("N·ªôi dung ph·∫£n h·ªìi")
    created_at = models.DateTimeField("Th·ªùi gian ph·∫£n h·ªìi", auto_now_add=True)

    class Meta:
        verbose_name = "Ph·∫£n h·ªìi qu·∫£n l√Ω"
        verbose_name_plural = "Ph·∫£n h·ªìi qu·∫£n l√Ω"
        ordering = ['-created_at']

    def __str__(self):
        return f"Ph·∫£n h·ªìi t·ª´ {self.manager.username} cho {self.task.title}"

