from django.db import models, transaction
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.urls import reverse
from django.utils import timezone
from django.core.validators import MinValueValidator, MaxValueValidator


# =========================
# Department / UserProfile
# =========================

class Department(models.Model):
    name = models.CharField("T√™n ph√≤ng ban", max_length=120, unique=True)
    code = models.CharField("M√£ ph√≤ng ban", max_length=30, unique=True, blank=True, null=True)
    description = models.TextField("M√¥ t·∫£", blank=True, null=True)
    is_active = models.BooleanField("Ho·∫°t ƒë·ªông", default=True)

    class Meta:
        verbose_name = "Ph√≤ng ban"
        verbose_name_plural = "Ph√≤ng ban"
        ordering = ["name"]
        indexes = [
            models.Index(fields=["is_active"]),
            models.Index(fields=["name"]),
            models.Index(fields=["code"]),
        ]

    def __str__(self):
        return self.name

    def get_absolute_url(self):
        return reverse('admin:work_department_change', args=[self.id])


class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name="profile")
    department = models.ForeignKey(
        Department, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="Ph√≤ng ban"
    )
    phone = models.CharField("S·ªë ƒëi·ªán tho·∫°i", max_length=15, blank=True, null=True)
    position = models.CharField("Ch·ª©c v·ª•", max_length=100, blank=True, null=True)

    class Meta:
        verbose_name = "H·ªì s∆° ng∆∞·ªùi d√πng"
        verbose_name_plural = "H·ªì s∆° ng∆∞·ªùi d√πng"
        indexes = [
            models.Index(fields=["user"]),
            models.Index(fields=["department"]),
        ]

    def __str__(self):
        return f"{self.user.get_full_name() or self.user.username} - {self.department.name if self.department else 'Ch∆∞a c√≥ ph√≤ng ban'}"


# G·ªôp t·∫°o & l∆∞u profile v√†o 1 signal ƒë·ªÉ tr√°nh double trigger
@receiver(post_save, sender=User)
def ensure_user_profile(sender, instance, created, **kwargs):
    # T·∫°o n·∫øu thi·∫øu
    if created:
        UserProfile.objects.create(user=instance)
        return
    # N·∫øu ƒë√£ c√≥, ƒë·∫£m b·∫£o v·∫´n save ƒë·ªÉ trigger on_update c·∫ßn thi·∫øt (nh·∫π)
    if hasattr(instance, "profile"):
        instance.profile.save()


# =====
# Task
# =====

class Task(models.Model):
    class Status(models.TextChoices):
        NEW = 'NEW', 'üÜï Ch∆∞a b·∫Øt ƒë·∫ßu'
        DOING = 'DOING', 'üöÄ ƒêang th·ª±c hi·ªán'
        PENDING = 'PENDING', '‚è≥ Ch·ªù ph√™ duy·ªát'
        DONE = 'DONE', '‚úÖ ƒê√£ ho√†n th√†nh'
        CANCELLED = 'CANCELLED', '‚ùå ƒê√£ h·ªßy'

    class Priority(models.TextChoices):
        LOW = 'LOW', 'üìå Th·∫•p'
        MEDIUM = 'MEDIUM', 'üìù Trung b√¨nh'
        HIGH = 'HIGH', 'üî• Cao'
        URGENT = 'URGENT', '‚ö° Kh·∫©n c·∫•p'

    department = models.ForeignKey(
        Department, on_delete=models.SET_NULL, null=True, blank=True, verbose_name="Ph√≤ng ban", db_index=True
    )
    title = models.CharField("T√™n c√¥ng vi·ªác", max_length=255)
    content = models.TextField("N·ªôi dung c√¥ng vi·ªác", blank=True)
    priority = models.CharField(
        "ƒê·ªô ∆∞u ti√™n", max_length=10, choices=Priority.choices, default=Priority.MEDIUM, db_index=True
    )

    assigned_by = models.ForeignKey(
        User, related_name='assigned_tasks', on_delete=models.PROTECT, verbose_name="Ng∆∞·ªùi giao vi·ªác", db_index=True
    )
    assignee = models.ForeignKey(
        User, related_name='tasks', on_delete=models.PROTECT, verbose_name="Ng∆∞·ªùi ph·ª• tr√°ch", db_index=True
    )
    supporters = models.ManyToManyField(
        User, related_name='supporting_tasks', blank=True, verbose_name="Ng∆∞·ªùi h·ªó tr·ª£"
    )

    progress = models.PositiveIntegerField("% ho√†n th√†nh", default=0,
                                           validators=[MinValueValidator(0), MaxValueValidator(100)])
    status = models.CharField("Tr·∫°ng th√°i", max_length=10, choices=Status.choices, default=Status.NEW, db_index=True)

    deadline = models.DateTimeField("H·∫°n ho√†n th√†nh", null=True, blank=True, db_index=True)
    estimated_hours = models.PositiveIntegerField("Gi·ªù ∆∞·ªõc t√≠nh", null=True, blank=True)

    approver = models.ForeignKey(
        User, related_name='approved_tasks', on_delete=models.SET_NULL,
        null=True, blank=True, verbose_name="Ng∆∞·ªùi ph√™ duy·ªát", db_index=True
    )
    approved_at = models.DateTimeField("Th·ªùi gian ph√™ duy·ªát", null=True, blank=True)

    created_at = models.DateTimeField("Ng√†y t·∫°o", auto_now_add=True, db_index=True)
    updated_at = models.DateTimeField("C·∫≠p nh·∫≠t l√∫c", auto_now=True, db_index=True)

    class Meta:
        verbose_name = "C√¥ng vi·ªác"
        verbose_name_plural = "C√¥ng vi·ªác"
        # Gi·ªØ nguy√™n 2 quy·ªÅn custom nh∆∞ b·∫°n y√™u c·∫ßu
        permissions = [
            ('can_approve', 'C√≥ th·ªÉ ph√™ duy·ªát c√¥ng vi·ªác'),
            ('view_all_tasks', 'C√≥ th·ªÉ xem t·∫•t c·∫£ c√¥ng vi·ªác (read-only)'),
        ]
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=["status", "priority"]),
            models.Index(fields=["assignee", "status"]),
            models.Index(fields=["department", "status"]),
            models.Index(fields=["deadline", "status"]),
            models.Index(fields=["created_at"]),
            models.Index(fields=["updated_at"]),
        ]

    def __str__(self):
        return f"{self.title} ({self.get_status_display()})"

    def get_absolute_url(self):
        return reverse('task_list')

    def save(self, *args, **kwargs):
        """
        - Cho ph√©p DONE != 100% (gi·ªØ nguy√™n nghi·ªáp v·ª•).
        - N·∫øu ƒë√£ c√≥ approver v√† status=DONE m√† ch∆∞a c√≥ approved_at -> set approved_at.
        - Kh√¥ng t·ª± √©p tr·∫°ng th√°i d·ª±a tr√™n % ·ªü ƒë√¢y (ƒë√£ x·ª≠ l√Ω trong TaskUpdate ho·∫∑c view).
        """
        if self.status == self.Status.DONE and self.approver and not self.approved_at:
            self.approved_at = timezone.now()
        super().save(*args, **kwargs)

    @property
    def is_overdue(self) -> bool:
        if self.deadline:
            # timezone-aware compare
            now = timezone.localtime(timezone.now())
            dl = timezone.localtime(self.deadline)
            return now > dl and self.status not in (self.Status.DONE, self.Status.CANCELLED)
        return False

    @property
    def days_until_deadline(self):
        if self.deadline:
            delta = timezone.localtime(self.deadline) - timezone.localtime(timezone.now())
            return delta.days
        return None


# ==============
# TaskUpdate / Feedback
# ==============

class TaskUpdate(models.Model):
    """B·∫£n c·∫≠p nh·∫≠t ti·∫øn ƒë·ªô c·ªßa nh√¢n vi√™n cho c√¥ng vi·ªác."""
    task = models.ForeignKey(
        Task, related_name='updates', on_delete=models.CASCADE, verbose_name="C√¥ng vi·ªác"
    )
    user = models.ForeignKey(
        User, related_name='task_updates', on_delete=models.CASCADE, verbose_name="Ng∆∞·ªùi c·∫≠p nh·∫≠t"
    )
    content = models.TextField("N·ªôi dung c·∫≠p nh·∫≠t", blank=True, null=True)
    progress = models.PositiveIntegerField(
        "% ho√†n th√†nh", default=0, validators=[MinValueValidator(0), MaxValueValidator(100)]
    )
    created_at = models.DateTimeField("Th·ªùi gian c·∫≠p nh·∫≠t", auto_now_add=True, db_index=True)

    class Meta:
        verbose_name = "C·∫≠p nh·∫≠t c√¥ng vi·ªác"
        verbose_name_plural = "C·∫≠p nh·∫≠t c√¥ng vi·ªác"
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=["task", "created_at"]),
            models.Index(fields=["user", "created_at"]),
        ]

    def __str__(self):
        return f"C·∫≠p nh·∫≠t #{self.id} - {self.task.title} - {self.progress}%"

    def save(self, *args, **kwargs):
        """
        Sau khi l∆∞u b·∫£n c·∫≠p nh·∫≠t:
        - ƒê·ªìng b·ªô progress v√†o Task n·∫øu thay ƒë·ªïi.
        - N·∫øu Task ch∆∞a DONE:
          + progress >= 100  -> PENDING (ch·ªù duy·ªát)
          + 0 < progress < 100 -> DOING
          + progress == 0 -> NEW
        - Ch·ªâ update c√°c field thay ƒë·ªïi (update_fields) ƒë·ªÉ t·ªëi ∆∞u truy v·∫•n.
        """
        with transaction.atomic():
            super().save(*args, **kwargs)
            task = self.task

            fields_to_update = []

            # ƒê·ªìng b·ªô % ho√†n th√†nh
            if task.progress != self.progress:
                task.progress = self.progress
                fields_to_update.append('progress')

            # C·∫≠p nh·∫≠t tr·∫°ng th√°i n·∫øu ch∆∞a DONE
            if task.status != Task.Status.DONE:
                if self.progress >= 100 and task.status != Task.Status.PENDING:
                    task.status = Task.Status.PENDING
                    fields_to_update.append('status')
                elif 0 < self.progress < 100 and task.status != Task.Status.DOING:
                    task.status = Task.Status.DOING
                    fields_to_update.append('status')
                elif self.progress == 0 and task.status != Task.Status.NEW:
                    task.status = Task.Status.NEW
                    fields_to_update.append('status')

            if fields_to_update:
                task.updated_at = timezone.now()
                fields_to_update.append('updated_at')
                task.save(update_fields=fields_to_update)


class ManagerFeedback(models.Model):
    """Ph·∫£n h·ªìi c·ªßa qu·∫£n l√Ω cho c√¥ng vi·ªác."""
    task = models.ForeignKey(
        Task, related_name='manager_feedbacks', on_delete=models.CASCADE, verbose_name="C√¥ng vi·ªác"
    )
    manager = models.ForeignKey(
        User, related_name='manager_feedbacks', on_delete=models.CASCADE, verbose_name="Qu·∫£n l√Ω"
    )
    content = models.TextField("N·ªôi dung ph·∫£n h·ªìi")
    created_at = models.DateTimeField("Th·ªùi gian ph·∫£n h·ªìi", auto_now_add=True, db_index=True)

    class Meta:
        verbose_name = "Ph·∫£n h·ªìi qu·∫£n l√Ω"
        verbose_name_plural = "Ph·∫£n h·ªìi qu·∫£n l√Ω"
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=["task", "created_at"]),
            models.Index(fields=["manager", "created_at"]),
        ]

    def __str__(self):
        return f"Ph·∫£n h·ªìi t·ª´ {self.manager.username} cho {self.task.title}"

